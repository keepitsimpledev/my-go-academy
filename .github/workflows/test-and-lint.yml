name: go-academy-ci
on:
  push:
    # will run on all pushes

permissions:
  contents: read
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  # pull-requests: read

jobs:
  # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go
  build-and-test:
    runs-on: ubuntu-22.04
    # runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.1'
        cache: false

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v -race ./...

    - name: Coverage
      run: |
        go test -coverprofile=coverage.out ./...
        echo Reminder: coverprofile format is
        echo '<filepath/><filename>.go:<from line>.<from column>,<to line>.<to column> <number of statements found> <number of times execution>'
        cat coverage.out
      # for html: `$ go tool cover -html=coverage.html.out -o coverage.html`

  vet-and-bench:
    runs-on: ubuntu-22.04
    # runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.1'
        cache: false

    - name: Vet
      run: go vet ./...

    - name: Benchmark
      run: go test -bench=. ./...

  # https://golangci-lint.run/usage/install#github-actions
  # https://github.com/golangci/golangci-lint-action
  golangci-lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.54

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          # args: --timeout=30m --config=/my/path/.golangci.yml --issues-exit-code=0 
          args: >
            -E asciicheck
            -E bidichk
            -E bodyclose
            -E decorder
            -E dogsled
            -E dupl
            -E dupword
            -E errname
            -E exhaustive
            -E exhaustruct
            -E gochecknoglobals
            -E gochecknoinits
            -E goconst
            -E godox
            -E gofmt
            -E gomnd
            -E gosec
            -E lll
            -E misspell
            -E nestif
            -E nilerr
            -E reassign
            -E revive
            -E stylecheck
            -E thelper
            -E unconvert
            -E unparam
            -E wastedassign
            -E whitespace
            -E wrapcheck
            -E wsl
          # linters reference https://golangci-lint.run/usage/linters/

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # enabling skip-pkg-cache as a workaround for issue https://github.com/golangci/golangci-lint-action/issues/135
          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          skip-pkg-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"
